@page "/prisijungti"
@using BlazorServer.Authentication
@using BlazorServer.Models
@inject UserAccountService userAccountService
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager
@inject Blazored.SessionStorage.ISessionStorageService _currentSession

@using DataLibrary
@inject IDataAccess _data
@inject IConfiguration _config


<PageTitle>Prisijungti</PageTitle>
<h1>Prisijungti</h1>

Slapyvardis
<input @bind="model.slapyvardis" type="text" class="form-control" id="name"/>
Slaptažodis
<input @bind="model.slaptazodis" type="password" class="form-control" id="name"/>

<div class="form-check">
      <input type="checkbox" class="form-check-input" id="dropdownCheck">
      Prisiminti mane
</div>
<a class="btn btn-primary" href="" role="button" @onclick="Authenticate">Prisijungti</a>
<a class="dropdown-item" href="registruotis">Neturi paskyros? Registruokis čia!</a>


@code 
{
    private Naudotojas model = new Naudotojas();
    List<Naudotojas> naudotojas;

    private async Task Authenticate()
    {
        await CheckUserInDatabase();

        if ( naudotojas.Count()<1)
        {
            await js.InvokeVoidAsync("alert", "Invalid User Name or Password");
            return;
        }

        Naudotojas rastasNaudotojas = new Naudotojas();
        rastasNaudotojas = naudotojas.First();

        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;

        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
        {
            UserName = rastasNaudotojas.slapyvardis,
            Role = rastasNaudotojas.role
        });

        SetSessionUser(rastasNaudotojas);

        if (rastasNaudotojas.role == "klientas")
            navManager.NavigateTo("/", true);
        else if (rastasNaudotojas.role == "administratorius")
            navManager.NavigateTo("/admin", true);
        else if (rastasNaudotojas.role == "treneris")
            navManager.NavigateTo("/", true);
    }

    protected async Task CheckUserInDatabase()
    {
        string sql = "select * from naudotojai where slapyvardis = @slapyvardis AND slaptazodis = @slaptazodis limit 1";

        naudotojas = await _data.LoadData<Naudotojas, dynamic>(sql, new { slapyvardis = model.slapyvardis, slaptazodis = model.slaptazodis }, _config.GetConnectionString("default"));
    }

    public void SetSessionUser(Naudotojas rastasNaudotojas)
    {
        var user = new UserAccount();
        user.Id = rastasNaudotojas.id;
        user.UserName = rastasNaudotojas.slapyvardis;
        user.Password = rastasNaudotojas.slaptazodis;
        user.Role = rastasNaudotojas.role;

        _currentSession.SetItemAsync("SessionUser", user);
    }
}